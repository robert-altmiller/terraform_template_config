name: Create Mult Resources Terraform Json Payload

on:
  workflow_dispatch:

jobs:

  get_issue_in_json:

    runs-on: ubuntu-latest

    env:
      ISSUE_USER_LOGIN: "${{ github.repository_owner }}"
      EMAIL_COMPANY_NAME: "@databricks.com"
    
    steps:

      - name: Get the Github issue, issue main feature branch names
        run: |
          ISSUE_BRANCH_NAME=issue-${{ github.run_id }}-branch
          echo "ISSUE_BRANCH_NAME=$ISSUE_BRANCH_NAME" >> $GITHUB_ENV
          echo ISSUE_BRANCH_NAME: $ISSUE_BRANCH_NAME
          ISSUE_BRANCH_NAME_MAIN=issue-${{ github.run_id }}-main-branch
          echo "ISSUE_BRANCH_NAME_MAIN=$ISSUE_BRANCH_NAME_MAIN" >> $GITHUB_ENV
          echo ISSUE_BRANCH_NAME_MAIN: $ISSUE_BRANCH_NAME_MAIN
      

      - uses: actions/checkout@v3
        with:
          token: ${{ secrets.GH_TOKEN }}

          
      - name: Create new feature branch from main branch (e.g. runid-[github_runid]-branch)
        run: |
          git checkout main
          git pull
          git checkout -b ${{ env.ISSUE_BRANCH_NAME }}
          # Force push the branch to the remote, overwriting if it already exists
          git push -f origin ${{ env.ISSUE_BRANCH_NAME }}


      - name: Create new feature branch from main branch (e.g. runid-[github_runid]-main-branch)
        run: |
          git checkout main
          git pull
          git checkout -b ${{ env.ISSUE_BRANCH_NAME_MAIN }}
          # Force push the branch to the remote, overwriting if it already exists
          git push -f origin ${{ env.ISSUE_BRANCH_NAME_MAIN }}


      - uses: actions/checkout@v3
        with:
          token: ${{ secrets.GH_TOKEN }}
          ref: ${{ env.ISSUE_BRANCH_NAME }}


      - name: Install jq
        run: sudo apt-get install jq

        
      - uses: actions/setup-node@v2
        with:
          node-version: '16'


      - name: Extract JSON Data From xlstojson Input for Multiple Databricks Resources
        run: |
          pip install pandas openpyxl
          XLSX_JSON=$(python ./xlsxtojson/process_xlsx_input.py)
          echo XLSX_JSON: $XLSX_JSON
          echo "XLSX_JSON=$XLSX_JSON" >> $GITHUB_ENV

          # Use jq to extract the top-level keys (block names) from the JSON
          json_keys=$(echo "$XLSX_JSON" | jq -r 'keys[]')

          # Iterate over each top-level JSON key
          for json_key in $json_keys; do
            echo "json_key: $json_key"

            # Use jq to extract the blocks within the current JSON key and iterate over them
            echo "$XLSX_JSON" | jq -c ".$json_key[]" | while read -r block; do
                
                ENVIRONMENT=$(echo "$block" | jq -r '.environment')
                echo "ISSUE_ENVIRONMENT=$ENVIRONMENT" >> $GITHUB_ENV

                DIRECTORY="master_config/$ENVIRONMENT"
                mkdir -p "$DIRECTORY"
                FILE="${DIRECTORY}/$json_key.json"
                if [[ ! -f "$FILE" ]]; then
                    echo '{"$json_key": {}}' > "$FILE"
                    echo "$FILE created."
                else
                    echo "$FILE already exists."
                fi

                ISSUE_JSON=$block
                echo ISSUE_JSON: $ISSUE_JSON
                MASTER_CONFIG_JSON=$(cat master_config/$ENVIRONMENT/$json_key.json)
                echo MASTER_CONFIG_JSON: $MASTER_CONFIG_JSON
                ISSUE_RESOURCE_NAME=$(echo $ISSUE_JSON | jq -r .resource_name)
                ISSUE_ACTION=$(echo $ISSUE_JSON | jq -r .create_or_delete)

                if [[ "$ISSUE_ACTION" == "create" ]]; then
                  UPDATED_MASTER_CONFIG=$(echo $MASTER_CONFIG_JSON | jq ".$json_key.\"$ISSUE_RESOURCE_NAME\" = $ISSUE_JSON")
                elif [[ "$ISSUE_ACTION" == "destroy" ]]; then
                  UPDATED_MASTER_CONFIG=$(echo $MASTER_CONFIG_JSON | jq "del(.$json_key.\"$ISSUE_RESOURCE_NAME\")")
                else
                  echo "Unknown ISSUE_ACTION: $ISSUE_ACTION"
                  exit 1
                fi

                echo UPDATED_MASTER_CONFIG: $UPDATED_MASTER_CONFIG
                echo "$UPDATED_MASTER_CONFIG" > master_config/$ENVIRONMENT/$json_key.json
            done
          done


      - name: Combine all the Master Config json files together into a single dictionary (e.g. tf_issue_submission.json)
        run: |
          OUTPUT_JSON="{}" # initialize an empty JSON object
          # Iterate over each JSON file in the directory
          for filepath in master_config/${{ env.ISSUE_ENVIRONMENT }}/*.json; do
            FILE_CONTENTS=$(cat "$filepath")
            # Directly merge this file into our main JSON object
            OUTPUT_JSON=$(jq -s '.[0] * .[1]' <<< "$OUTPUT_JSON $FILE_CONTENTS")
          done
          # Save the merged JSON
          echo "$OUTPUT_JSON" > issue_submission/tf_issue_submission.json


      - name: Get Github env, repo url and master config config fname, and write to issue_submission --> env.sh
        run: |
          echo export XLSX_JSON='${{ env.ISSUE_ENVIRONMENT }}'' > issue_submission/env.sh
          echo export ENVIRONMENT=${{ env.ISSUE_ENVIRONMENT }} >> issue_submission/env.sh
          echo export ISSUE_BRANCH_NAME=${{ env.ISSUE_BRANCH_NAME }} >> issue_submission/env.sh
          echo export ISSUE_BRANCH_NAME_MAIN=${{ env.ISSUE_BRANCH_NAME_MAIN }} >> issue_submission/env.sh
          echo export ISSUE_RESOURCE_NAME="multiple_resource_request" >> issue_submission/env.sh
          echo export ISSUE_RESOURCE_TYPE="multiple" >> issue_submission/env.sh
          echo export ISSUE_REQUESTOR_EMAIL=${{ env.ISSUE_USER_LOGIN }}${{ env.EMAIL_COMPANY_NAME }}  >> issue_submission/env.sh
          echo export GITHUB_ISSUE_NUMBER=${{ github.run_id }} >> issue_submission/env.sh
          echo export GITHUB_REPO_OWNER=${{ github.repository_owner }} >> issue_submission/env.sh
          echo export GITHUB_REPO_NAME=${{ github.event.repository.name }} >> issue_submission/env.sh
          echo export GITHUB_REPO_URL=${{ github.server_url }}/${{ github.repository_owner }}/${{ github.event.repository.name }}.git >> issue_submission/env.sh


      - name: Commit updated issue submission JSON file to Terraform Config repo
        run: |
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git config --global user.name "github-actions[bot]"
          git remote set-url origin https://x-access-token:${{ secrets.GH_TOKEN }}@github.com/${{ github.repository_owner }}/${{ github.event.repository.name }}.git
          # Adding all folders and changes
          git add --all
          git commit -m 'new infrastructure submission' || echo "No changes to commit"
          git push origin ${{ env.ISSUE_BRANCH_NAME }}


      - name: Get the current date for Github issue pull request
        id: date
        run: echo "date=$(date +'%Y-%m-%d %H:%M:%S')" >> $GITHUB_ENV


      - name: Create Github issue pull request to main branch + approval
        uses: repo-sync/pull-request@v2
        with:
          source_branch: ${{ env.ISSUE_BRANCH_NAME }}
          destination_branch: ${{ env.ISSUE_BRANCH_NAME_MAIN }}
          github_token: ${{ secrets.GH_TOKEN }}
          pr_title: "databricks - multiple resources - request (${{ env.ISSUE_ENVIRONMENT }})"
          pr_body: |
            Issue Requestor: ${{ env.ISSUE_USER_LOGIN }}${{ env.EMAIL_COMPANY_NAME }}
            PR Time: ${{ env.date }}
            PR Person: ${{ github.actor }}
            PR Feature Branch: ${{ env.ISSUE_BRANCH_NAME }}
            PR Feature Main Branch: ${{ env.ISSUE_BRANCH_NAME_MAIN }}
            Databricks Multiple Resources Environment: ${{ env.ISSUE_ENVIRONMENT }}
            Databricks Multiple Resources Payload: ${{ env.XLSX_JSON }}